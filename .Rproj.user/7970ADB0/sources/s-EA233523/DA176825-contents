library(tidyverse)

# Read data
data <- read_lines("Data/Day5.txt")

# Task 1 ------------------------------------------------------------------

# Write function to get row and column
get_seat <- function(pass) {
  # Initial sequence of valid rows
  valid_rows <- seq(from = 0, to = 127, by = 1)
  
  # Cut in half for each letter, depending on front or back
  for (i in 1:7) {
    if (substring(pass, i, i) == "B") {
      valid_rows <-
        valid_rows[valid_rows >= ((length(valid_rows) / 2) + min(valid_rows))]
    } else {
      valid_rows <-
        valid_rows[valid_rows < ((length(valid_rows) / 2) + min(valid_rows))]
    }
  }
  
  # Initial sequence of valid cols
  valid_cols <- seq(from = 0, to = 7, by = 1)
  
  # Cut in half for each letter, depending on left or right
  for (i in 8:10) {
    if (substring(pass, i, i) == "R") {
      valid_cols <-
        valid_cols[valid_cols >= ((length(valid_cols) / 2) + min(valid_cols))]
    } else {
      valid_cols <-
        valid_cols[valid_cols < ((length(valid_cols) / 2) + min(valid_cols))]
    }
  }
  
  return(valid_rows * 8 + valid_cols)
}

# Apply function across all boarding passes and get max
seat_ids <- sapply(data, get_seat)
t1_ans <- max(seat_ids)


# Task 2 ------------------------------------------------------------------

# Create sequence of all seat ids from front to back
# Note - we know our seat is in the middle somewhere
all_seats <- seq(from = min(seat_ids), to = max(seat_ids), by = 1)

# Get true/false whether seat id from seq is in seat ids from above
seats_filled <- all_seats %in% seat_ids

# Find the one missing :)
t2_ans <- all_seats[!seats_filled]
